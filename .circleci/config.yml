# CircleCI v2 Config
version: 2

defaults_working_directory: &defaults_working_directory
  working_directory: /home/circleci/project

defaults_docker_node: &defaults_docker_node
  docker:
    - image: mhart/alpine-node:8.9.4

defaults_docker_helm_kube: &defaults_docker_helm_kube
  docker:
    - image: hypnoglow/kubernetes-helm

defaults_Dependencies: &defaults_Dependencies |
    apk --no-cache add git
    apk --no-cache add ca-certificates
    apk --no-cache add curl
    apk --no-cache add openssh-client
    apk add --no-cache -t build-dependencies make gcc g++ python libtool autoconf automake
    npm install -g node-gyp

defaults_awsCliDependencies: &defaults_awsCliDependencies |
    apk --no-cache add \
            python \
            py-pip \
            groff \
            less \
            mailcap
    pip install --upgrade awscli==1.14.5 s3cmd==2.0.1 python-magic
    apk -v --purge del py-pip

defaults_build_docker_login: &defaults_build_docker_login
  name: Login to Docker Hub
  command: |
    docker login -u $DOCKER_USER -p $DOCKER_PASS

defaults_build_docker_build: &defaults_build_docker_build
  name: Build Docker image
  command: |
    docker build -t $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG -t $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$RELEASE_TAG .

defaults_build_docker_publish: &defaults_build_docker_publish
  name: Publish Docker image $CIRCLE_TAG & Latest tag to Docker Hub
  command: |
    echo "Publishing $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG"
    docker push $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG
    echo "Publishing $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$RELEASE_TAG"
    docker push $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$RELEASE_TAG

defaults_deploy_prequisites: &defaults_deploy_prequisites
  name: Copy deployment pre-requisites from S3 bucket
  command: |
    if [ -z "$K8_USER_TOKEN" ];
    then
        echo "Copying K8 keys into $AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_KEYS folder"
        mkdir $CIRCLE_WORKING_DIRECTORY/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_KEYS
        aws s3 cp $AWS_S3_URI_DEVOPS_DEPLOYMENT_CONFIG/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_KEYS/$K8_USER_PEM_KEY_FILENAME $CIRCLE_WORKING_DIRECTORY/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_KEYS/
        aws s3 cp $AWS_S3_URI_DEVOPS_DEPLOYMENT_CONFIG/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_KEYS/$K8_USER_PEM_CERT_FILENAME $CIRCLE_WORKING_DIRECTORY/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_KEYS/
    else
        echo "Skipping K8 keys into $AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_KEYS folder"
    fi

    echo "Copying Helm value file into $AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_HELM folder for $K8_RELEASE_NAME release"
    mkdir $CIRCLE_WORKING_DIRECTORY/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_HELM
    aws s3 cp $AWS_S3_URI_DEVOPS_DEPLOYMENT_CONFIG/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_HELM/$HELM_VALUE_FILENAME $CIRCLE_WORKING_DIRECTORY/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_HELM/

defaults_deploy_config_kubernetes_cluster: &defaults_deploy_config_kubernetes_cluster
  name: Configure Kubernetes cluster
  command: |
    echo "Configure Kubernetes cluster ${K8_CLUSTER_NAME}"
    kubectl config set-cluster $K8_CLUSTER_NAME --server=$K8_CLUSTER_SERVER --insecure-skip-tls-verify=true

defaults_deploy_config_kubernetes_credentials: &defaults_deploy_config_kubernetes_credentials
  name: Configure Kubernetes credentails
  command: |
    echo "Configure Kubernetes credentials ${K8_USER_NAME}"
    if [ ! -z "$K8_USER_TOKEN" ];
    then
        echo "Configure Kubernetes credentials ${K8_USER_NAME} using Token"
        kubectl config set-credentials $K8_USER_NAME --token=$K8_USER_TOKEN
    else
        echo "Configure Kubernetes credentials ${K8_USER_NAME} using Certs"
        kubectl config set-credentials $K8_USER_NAME --client-certificate=$CIRCLE_WORKING_DIRECTORY/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_KEYS/$K8_USER_PEM_CERT_FILENAME --client-key=$CIRCLE_WORKING_DIRECTORY/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_KEYS/$K8_USER_PEM_KEY_FILENAME
    fi

defaults_deploy_config_kubernetes_context: &defaults_deploy_config_kubernetes_context
  name: Confi gure Kubernetes context
  command: |
    echo "Configure Kubernetes context ${K8_CLUSTER_NAME}"
    kubectl config set-context $K8_CLUSTER_NAME --cluster=$K8_CLUSTER_NAME --user=$K8_USER_NAME --namespace=$K8_NAMESPACE

defaults_deploy_set_kubernetes_context: &defaults_deploy_set_kubernetes_context
  name: Set Kubernetes context
  command: |
    echo "Configure Kubernetes context ${K8_CLUSTER_NAME}"
    kubectl config use-context $K8_CLUSTER_NAME

defaults_deploy_configure_helm: &defaults_deploy_configure_helm
  name: Configure Helm
  command: |
    helm init --client-only

defaults_deploy_install_or_upgrade_helm_chart: &defaults_deploy_install_or_upgrade_helm_chart
  name: Install or Upgrade Helm Chart
  command: |
    echo "Install or Upgrade Chart ${K8_RELEASE_NAME} for Docker Image ${DOCKER_ORG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_TAG}"
    if [ -z "$(helm list -q | grep -E "^${K8_RELEASE_NAME}$")"  ] && [ "$(helm list -q | grep -E "^${K8_RELEASE_NAME}$")" != "Error: Unauthorized" ];
    then
        echo "Installing ${K8_RELEASE_NAME} new release"
        helm install --namespace=$K8_NAMESPACE --name=$K8_RELEASE_NAME --repo=$K8_HELM_REPO --version $K8_HELM_CHART_VERSION $HELM_VALUE_SET_VALUES -f $CIRCLE_WORKING_DIRECTORY/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_HELM/$HELM_VALUE_FILENAME $K8_HELM_CHART_NAME
    else
        echo "Upgrading ${K8_RELEASE_NAME} release"
        helm upgrade $K8_RELEASE_NAME --repo=$K8_HELM_REPO --version $K8_HELM_CHART_VERSION --reuse-values $HELM_VALUE_SET_VALUES -f $CIRCLE_WORKING_DIRECTORY/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_HELM/$HELM_VALUE_FILENAME $K8_HELM_CHART_NAME
    fi

jobs:
  setup:
    <<: *defaults_working_directory
    <<: *defaults_docker_node
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - run:
          name: Access npm folder as root
          command: cd $(npm root -g)/npm
      - run:
          name: Install interledgerjs/five-bells-ledger-api-tests
          command: npm install github:interledgerjs/five-bells-ledger-api-tests
      - run:
          name: Update NPM install
          command: npm install
      - run:
          name: Delete build dependencies
          command: apk del build-dependencies
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - node_modules

  test-unit:
    <<: *defaults_working_directory
    <<: *defaults_docker_node
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Install tape, tapes and tap-xunit
          command: npm install -g tape tapes tap-xunit
      - run:
          name: Create dir for test results
          command: mkdir -p ./test/results
      - run:
          name: Execute unit tests
          command: npm -s run test:xunit > ./test/results/tape.xml
      - store_artifacts:
          path: ./test/results
          prefix: test
      - store_test_results:
          path: ./test/results

  test-coverage:
    <<: *defaults_working_directory
    <<: *defaults_docker_node
    steps:
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - run:
          name: Install AWS CLI dependencies
          command: *defaults_awsCliDependencies
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Execute code coverage check
          command: npm -s run test:coverage-check
      - store_artifacts:
          path: coverage
          prefix: test
      - store_test_results:
          path: coverage
      - run:
          name: Copy code coverage to SonarQube
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ];
            then
                echo "Sending lcov.info to SonarQube..."
                aws s3 cp coverage/lcov.info $AWS_S3_DIR_SONARQUBE/central-ledger/lcov.info
            else
                echo "Not a release (env CIRCLE_BRANCH != 'master'), skipping sending lcov.info to SonarQube."
            fi

  test-integration:
    machine: true
    <<: *defaults_working_directory
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Create dir for test results
          command: mkdir -p ./test/results
      - run:
          name: Execute integration tests
          command: npm -s run test:integration
      - store_artifacts:
          path: ./test/results
          prefix: test
      - store_test_results:
          path: ./test/results

  test-functional:
    machine: true
    <<: *defaults_working_directory
    steps:
      - run:
          name: Add the Postgres 9.6 binaries to the path.
          command: echo ‘/usr/lib/postgresql/9.6/bin/:$PATH’ >> $BASH_ENV
      - run:
          name: Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.11.2/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            mv ~/docker-compose /usr/local/bin/docker-compose
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Create dir for test results
          command: mkdir -p ./test/results
      - run:
          name: Execute functional tests
          command: npm -s run test:functional
      - store_artifacts:
          path: ./test/results
          prefix: test
      - store_test_results:
          path: ./test/results

#   test-spec:
#     machine: true
#     # <<: *defaults
#     steps:
#     #   - run:
#     #       name: Install general dependencies
#     #       command: *defaultDependencies
#     #   - run:
#     #       name: Add the Postgres 9.6 binaries to the path.
#     #       command: apk --no-cache add postgresql-client
#     #   - setup_remote_docker
#     #   - run:
#     #       name: Add docker
#     #       command: apk --no-cache add docker
#     #   - run:
#     #       name: Add docker compose
#     #       command: |
#     #         apk --no-cache add py-pip
#     #         pip install docker-compose
#     #   - run:
#     #       name: Install Docker Compose
#     #       command: |
#     #         curl -L https://github.com/docker/compose/releases/download/1.8.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose; chmod +x /usr/local/bin/docker-compose
#       - run:
#           name: Add the Postgres 9.6 binaries to the path.
#           command: echo ‘/usr/lib/postgresql/9.6/bin/:$PATH’ >> $BASH_ENV
#       - run:
#           name: Install Docker Compose
#           command: |
#             curl -L https://github.com/docker/compose/releases/download/1.11.2/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
#             chmod +x ~/docker-compose
#             mv ~/docker-compose /usr/local/bin/docker-compose
#       - checkout
#       - restore_cache:
#           key: dependency-cache-{{ checksum "package.json" }}
#       - run:
#           name: Create dir for test results
#           command: mkdir -p ./test/results
#       - run:
#           name: Execute unit tests
#           command: npm -s run test:spec
#       - store_artifacts:
#           path: ./test/results
#           prefix: test
#       - store_test_results:
#           path: ./test/results

  build-snapshot:
    machine: true
    <<: *defaults_working_directory
    steps:
      - checkout
      - run:
          name: setup environment vars for SNAPSHOT release
          command: |
            echo 'export RELEASE_TAG=$RELEASE_TAG_SNAPSHOT' >> $BASH_ENV
      - run:
          <<: *defaults_build_docker_login
      - run:
          <<: *defaults_build_docker_build
      - run:
          <<: *defaults_build_docker_publish

  build:
    machine: true
    # <<: *default_env
    steps:
      - checkout
      - run:
          name: setup environment vars for LATEST release
          command: |
            echo 'export RELEASE_TAG=$RELEASE_TAG_PROD' >> $BASH_ENV
      - run:
          <<: *defaults_build_docker_login
      - run:
          <<: *defaults_build_docker_build
      - run:
          <<: *defaults_build_docker_publish

  deploy-snapshot:
    <<: *defaults_working_directory
    <<: *defaults_docker_helm_kube
    steps:
      - run:
          name: Install AWS CLI dependencies
          command: *defaults_awsCliDependencies
      - run:
          name: setup environment vars for SNAPSHOT release
          command: |
            echo 'export HELM_VALUE_FILENAME=$K8_HELM_VALUE_FILENAME_SNAPSHOT' >> $BASH_ENV
            echo 'export K8_CLUSTER_SERVER=$K8_CLUSTER_SERVER_SNAPSHOT' >> $BASH_ENV
            echo 'export K8_RELEASE_NAME=$K8_RELEASE_NAME_SNAPSHOT' >> $BASH_ENV
            echo 'export K8_NAMESPACE=$K8_NAMESPACE_SNAPSHOT' >> $BASH_ENV
            echo 'export K8_USER_NAME=$K8_USER_NAME_SNAPSHOT' >> $BASH_ENV
            echo 'export K8_USER_TOKEN=$K8_USER_TOKEN_SNAPSHOT' >> $BASH_ENV
            echo 'export K8_HELM_CHART_NAME=$K8_HELM_CHART_NAME_SNAPSHOT' >> $BASH_ENV
            echo 'export K8_HELM_CHART_VERSION=$K8_HELM_CHART_VERSION_SNAPSHOT' >> $BASH_ENV
            echo 'export HELM_VALUE_SET_VALUES="--set central.centralhub.centralledger.containers.api.image.repository=$DOCKER_ORG/$CIRCLE_PROJECT_REPONAME --set central.centralhub.centralledger.containers.api.image.tag=$CIRCLE_TAG --set central.centralhub.centralledger.containers.admin.image.repository=$DOCKER_ORG/$CIRCLE_PROJECT_REPONAME --set central.centralhub.centralledger.containers.admin.image.tag=$CIRCLE_TAG"' >> $BASH_ENV
      - run:
          <<: *defaults_deploy_prequisites
      - run:
          <<: *defaults_deploy_config_kubernetes_cluster
      - run:
          <<: *defaults_deploy_config_kubernetes_credentials
      - run:
          <<: *defaults_deploy_config_kubernetes_context
      - run:
          <<: *defaults_deploy_set_kubernetes_context
      - run:
          <<: *defaults_deploy_configure_helm
      - run:
          <<: *defaults_deploy_install_or_upgrade_helm_chart

  deploy:
    <<: *defaults_working_directory
    <<: *defaults_docker_helm_kube
    steps:
      - run:
          name: Install AWS CLI dependencies
          command: *defaults_awsCliDependencies
      - run:
          name: setup environment vars for release
          command: |
            echo 'export HELM_VALUE_FILENAME=$K8_HELM_VALUE_FILENAME_PROD' >> $BASH_ENV
            echo 'export K8_CLUSTER_SERVER=$K8_CLUSTER_SERVER_PROD' >> $BASH_ENV
            echo 'export K8_RELEASE_NAME=$K8_RELEASE_NAME_PROD' >> $BASH_ENV
            echo 'export K8_NAMESPACE=$K8_NAMESPACE_PROD' >> $BASH_ENV
            echo 'export K8_USER_NAME=$K8_USER_NAME_PROD' >> $BASH_ENV
            echo 'export K8_USER_TOKEN=$K8_USER_TOKEN_PROD' >> $BASH_ENV
            echo 'export K8_HELM_CHART_NAME=$K8_HELM_CHART_NAME_PROD' >> $BASH_ENV
            echo 'export K8_HELM_CHART_VERSION=$K8_HELM_CHART_VERSION_PROD' >> $BASH_ENV
            echo 'export HELM_VALUE_SET_VALUES="--set central.centralhub.centralledger.containers.api.image.repository=$DOCKER_ORG/$CIRCLE_PROJECT_REPONAME --set central.centralhub.centralledger.containers.api.image.tag=$CIRCLE_TAG --set central.centralhub.centralledger.containers.admin.image.repository=$DOCKER_ORG/$CIRCLE_PROJECT_REPONAME --set central.centralhub.centralledger.containers.admin.image.tag=$CIRCLE_TAG"' >> $BASH_ENV
      - run:
          <<: *defaults_deploy_prequisites
      - run:
          <<: *defaults_deploy_config_kubernetes_cluster
      - run:
          <<: *defaults_deploy_config_kubernetes_credentials
      - run:
          <<: *defaults_deploy_config_kubernetes_context
      - run:
          <<: *defaults_deploy_set_kubernetes_context
      - run:
          <<: *defaults_deploy_configure_helm
      - run:
          <<: *defaults_deploy_install_or_upgrade_helm_chart

workflows:
  version: 2
  build_and_test:
    jobs:
      - setup:
          context: org-global
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - test-unit:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - test-coverage:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - test-integration:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - test-functional:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
    #   - test-spec:
    #       context: org-global
    #       requires:
    #         - setup
    #       filters:
    #           tags:
    #             only: /.*/
    #         branches:
    #           ignore:
    #             - /feature*/
    #             - /bugfix*/
      - build-snapshot:
          context: org-global
          requires:
            - setup
            - test-unit
            - test-coverage
            - test-integration
            - test-functional
            # - test-spec
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*\-snapshot/
            branches:
              ignore:
                - /.*/
      - deploy-snapshot:
          context: org-global
          requires:
            - build-snapshot
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*\-snapshot/
            branches:
              ignore:
                - /.*/
      - build:
          context: org-global
          requires:
            - setup
            - test-unit
            - test-coverage
            - test-integration
            - test-functional
            # - test-spec
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
            branches:
              ignore:
                - /.*/
      - deploy:
          context: org-global
          requires:
            - build
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
            branches:
              ignore:
                - /.*/

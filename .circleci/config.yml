# CircleCI v2.1 Config
version: 2.1
orbs:
  anchore: anchore/anchore-engine@1.6.0

##
# defaults
#
# YAML defaults templates, in alphabetical order
##
defaults_Dependencies: &defaults_Dependencies |
    apk --no-cache add git
    apk --no-cache add ca-certificates
    apk --no-cache add curl
    apk --no-cache add openssh-client
    apk add --no-cache -t build-dependencies make gcc g++ python libtool autoconf automake
    npm config set unsafe-perm true
    npm install -g node-gyp

defaults_awsCliDependencies: &defaults_awsCliDependencies |
    apk --no-cache add \
            python \
            py-pip \
            groff \
            less \
            mailcap
    pip install --upgrade awscli==1.14.5 s3cmd==2.0.1 python-magic
    apk -v --purge del py-pip

defaults_build_docker_build: &defaults_build_docker_build
  name: Build Docker $CIRCLE_TAG image
  command: |
    echo "Building Docker image: $CIRCLE_TAG"
    docker build -t $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG .

defaults_build_docker_login: &defaults_build_docker_login
  name: Login to Docker Hub
  command: |
    docker login -u $DOCKER_USER -p $DOCKER_PASS

defaults_build_docker_publish: &defaults_build_docker_publish
  name: Publish Docker image $CIRCLE_TAG & Latest tag to Docker Hub
  command: |
    echo "Publishing $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG"
    docker push $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG
    echo "Publishing $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$RELEASE_TAG"
    docker push $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$RELEASE_TAG


defaults_deploy_config_kubernetes_cluster: &defaults_deploy_config_kubernetes_cluster
  name: Configure Kubernetes cluster
  command: |
    echo "Configure Kubernetes cluster ${K8_CLUSTER_NAME}"
    kubectl config set-cluster $K8_CLUSTER_NAME --server=$K8_CLUSTER_SERVER --insecure-skip-tls-verify=true

defaults_deploy_config_kubernetes_context: &defaults_deploy_config_kubernetes_context
  name: Confi gure Kubernetes context
  command: |
    echo "Configure Kubernetes context ${K8_CLUSTER_NAME}"
    kubectl config set-context $K8_CLUSTER_NAME --cluster=$K8_CLUSTER_NAME --user=$K8_USER_NAME --namespace=$K8_NAMESPACE

defaults_deploy_config_kubernetes_credentials: &defaults_deploy_config_kubernetes_credentials
  name: Configure Kubernetes credentails
  command: |
    echo "Configure Kubernetes credentials ${K8_USER_NAME}"
    if [ ! -z "$K8_USER_TOKEN" ];
    then
        echo "Configure Kubernetes credentials ${K8_USER_NAME} using Token"
        kubectl config set-credentials $K8_USER_NAME --token=$K8_USER_TOKEN
    else
        echo "Configure Kubernetes credentials ${K8_USER_NAME} using Certs"
        kubectl config set-credentials $K8_USER_NAME --client-certificate=$CIRCLE_WORKING_DIRECTORY/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_KEYS/$K8_USER_PEM_CERT_FILENAME --client-key=$CIRCLE_WORKING_DIRECTORY/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_KEYS/$K8_USER_PEM_KEY_FILENAME
    fi

defaults_deploy_configure_helm: &defaults_deploy_configure_helm
  name: Configure Helm
  command: |
    helm init --client-only

defaults_deploy_install_or_upgrade_helm_chart: &defaults_deploy_install_or_upgrade_helm_chart
  name: Install or Upgrade Helm Chart
  command: |
    echo "Install or Upgrade Chart ${K8_RELEASE_NAME} for Docker Image ${DOCKER_ORG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_TAG}"
    if [ -z "$(helm list -q | grep -E "^${K8_RELEASE_NAME}$")"  ] && [ "$(helm list -q | grep -E "^${K8_RELEASE_NAME}$")" != "Error: Unauthorized" ];
    then
        echo "Installing ${K8_RELEASE_NAME} new release"
        helm install --namespace=$K8_NAMESPACE --name=$K8_RELEASE_NAME --repo=$K8_HELM_REPO --version $K8_HELM_CHART_VERSION $HELM_VALUE_SET_VALUES -f $CIRCLE_WORKING_DIRECTORY/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_HELM/$HELM_VALUE_FILENAME $K8_HELM_CHART_NAME
    else
        echo "Upgrading ${K8_RELEASE_NAME} release"
        helm upgrade $K8_RELEASE_NAME --repo=$K8_HELM_REPO --version $K8_HELM_CHART_VERSION --reuse-values $HELM_VALUE_SET_VALUES -f $CIRCLE_WORKING_DIRECTORY/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_HELM/$HELM_VALUE_FILENAME $K8_HELM_CHART_NAME
    fi

defaults_deploy_prequisites: &defaults_deploy_prequisites
  name: Copy deployment pre-requisites from S3 bucket
  command: |
    if [ -z "$K8_USER_TOKEN" ];
    then
        echo "Copying K8 keys into $AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_KEYS folder"
        mkdir $CIRCLE_WORKING_DIRECTORY/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_KEYS
        aws s3 cp $AWS_S3_URI_DEVOPS_DEPLOYMENT_CONFIG/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_KEYS/$K8_USER_PEM_KEY_FILENAME $CIRCLE_WORKING_DIRECTORY/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_KEYS/
        aws s3 cp $AWS_S3_URI_DEVOPS_DEPLOYMENT_CONFIG/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_KEYS/$K8_USER_PEM_CERT_FILENAME $CIRCLE_WORKING_DIRECTORY/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_KEYS/
    else
        echo "Skipping K8 keys into $AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_KEYS folder"
    fi

    echo "Copying Helm value file into $AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_HELM folder for $K8_RELEASE_NAME release"
    mkdir $CIRCLE_WORKING_DIRECTORY/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_HELM
    aws s3 cp $AWS_S3_URI_DEVOPS_DEPLOYMENT_CONFIG/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_HELM/$HELM_VALUE_FILENAME $CIRCLE_WORKING_DIRECTORY/$AWS_S3_DIR_DEVOPS_DEPLOYMENT_CONFIG_HELM/

defaults_deploy_set_kubernetes_context: &defaults_deploy_set_kubernetes_context
  name: Set Kubernetes context
  command: |
    echo "Configure Kubernetes context ${K8_CLUSTER_NAME}"
    kubectl config use-context $K8_CLUSTER_NAME

defaults_license_scanner: &defaults_license_scanner
  name: Install and set up license-scanner
  command: |
    git clone https://github.com/mojaloop/license-scanner /tmp/license-scanner
    cd /tmp/license-scanner && make build default-files set-up

defaults_slack_announcement: &defaults_slack_announcement
  name: Slack announcement for tag releases
  command: |
    curl -X POST \
      $SLACK_WEBHOOK_ANNOUNCEMENT \
      -H 'Content-type: application/json' \
      -H 'cache-control: no-cache' \
      -d "{\"text\": \"*${CIRCLE_PROJECT_REPONAME}* - Release \`${CIRCLE_TAG}\`: https://github.com/mojaloop/${CIRCLE_PROJECT_REPONAME}/releases/tag/${CIRCLE_TAG}\"}"

##
# Executors
#
# CircleCI Executors
##
executors:
  default-docker:
    working_directory: /home/circleci/project
    docker:
      - image: node:12.16.0-alpine

  default-machine:
    machine:
      image: ubuntu-1604:201903-01

  helm-kube:
    working_directory: /home/circleci/project
    docker:
      - image: hypnoglow/kubernetes-helm

##
# Jobs
#
# A map of CircleCI jobs
##
jobs:
  setup:
    executor: default-docker
    steps:
      - checkout
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - run:
          name: Access npm folder as root
          command: cd $(npm root -g)/npm
      - run:
          name: Update NPM install
          command: npm install
      - run:
          name: Delete build dependencies
          command: apk del build-dependencies
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - node_modules

  test-unit:
    executor: default-docker
    steps:
      - checkout
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - restore_cache:
          keys:
          - dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Install tape, tapes and tap-xunit
          command: npm install -g tape tapes tap-xunit
      - run:
          name: Create dir for test results
          command: mkdir -p ./test/results
      - run:
          name: Execute unit tests
          command: npm -s run test:xunit > ./test/results/tape.xml
      - store_artifacts:
          path: ./test/results
          prefix: test
      - store_test_results:
          path: ./test/results

  test-coverage:
    executor: default-docker
    steps:
      - checkout
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - run:
          name: Install AWS CLI dependencies
          command: *defaults_awsCliDependencies
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Execute code coverage check
          command: npm -s run test:coverage-check
      - store_artifacts:
          path: coverage
          prefix: test
      - store_test_results:
          path: coverage
      - run:
          name: Copy code coverage to SonarQube
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ];
            then
                echo "Sending lcov.info to SonarQube..."
                aws s3 cp coverage/lcov.info $AWS_S3_DIR_SONARQUBE/$CIRCLE_PROJECT_REPONAME/lcov.info
            else
                echo "Not a release (env CIRCLE_BRANCH != 'master'), skipping sending lcov.info to SonarQube."
            fi

  test-integration:
    executor: default-machine
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Create dir for test results
          command: mkdir -p ./test/results
      - run:
          name: Execute integration tests
          command: npm -s run test:integration
          no_output_timeout: 25m
      - store_artifacts:
          path: ./test/results
          prefix: test
      - store_test_results:
          path: ./test/results

  vulnerability-check:
    executor: default-docker
    steps:
      - checkout
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Create dir for test results
          command: mkdir -p ./audit/results
      - run:
          name: Check for new npm vulnerabilities
          command: npm run audit:check --silent -- --json > ./audit/results/auditResults.json
      - store_artifacts:
          path: ./audit/results
          prefix: audit

  audit-licenses:
    executor: default-docker
    steps:
      - checkout
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - run:
          <<: *defaults_license_scanner
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Prune non-production packages before running license-scanner
          command: npm prune --production
      - run:
          name: Run the license-scanner
          command: cd /tmp/license-scanner && pathToRepo=$CIRCLE_WORKING_DIRECTORY make run
      - store_artifacts:
          path: /tmp/license-scanner/results
          prefix: licenses

  build:
    executor: default-machine
    steps:
      - checkout
      - run:
          <<: *defaults_build_docker_build
      - run:
          name: Save docker image to workspace
          command: docker save -o /tmp/docker-image.tar $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG
      - persist_to_workspace:
          root: /tmp
          paths:
            - ./docker-image.tar

  license-scan:
    executor: default-machine
    # <<: *defaults_test_env
    steps:
      - attach_workspace:
          at: /tmp
      - run:
          name: Load the pre-built docker image from workspace
          command: docker load -i /tmp/docker-image.tar
      - run:
          <<: *defaults_license_scanner
      - run:
          name: Run the license-scanner
          command: cd /tmp/license-scanner && mode=docker dockerImage=$DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG make run
      - store_artifacts:
          path: /tmp/license-scanner/results
          prefix: licenses

  image-scan:
    executor: anchore/anchore_engine
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Install AWS CLI dependencies
          command: *defaults_awsCliDependencies
      - attach_workspace:
          at: /tmp
      - run:
          name: Load the pre-built docker image from workspace
          command: docker load -i /tmp/docker-image.tar
      - anchore/analyze_local_image:
          dockerfile_path: ./Dockerfile
          image_name: ${DOCKER_ORG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_TAG}
          # Anchore bug: if policy_failure is `true`, reports don't get written - we manually check for failures below
          policy_failure: false
          timeout: '500'
      - run:
          name: Evaluate Failures.
          command: |
            if [[ ! $(which jq) ]]; then
              (set +o pipefail; apk add jq || apt-get install -y jq || yum install -y jq)
            fi
            if [[ $(ls anchore-reports/*content-os*.json 2> /dev/null) ]]; then
              printf "\n%s\n" "The following OS packages are installed:"
              jq '[.content | sort_by(.package) | .[] | {package: .package, version: .version}]' anchore-reports/*content-os*.json
            fi
            if [[ $(ls anchore-reports/*vuln*.json 2> /dev/null) ]]; then
              printf "\n%s\n" "The following vulnerabilities were found:"
              jq '[.vulnerabilities | group_by(.package) | .[] | {package: .[0].package, vuln: [.[].vuln]}]' anchore-reports/*vuln*.json
            fi
      - run:
          name: Upload Anchore reports to s3
          command: |
            aws s3 cp anchore-reports ${AWS_S3_DIR_ANCHORE_REPORTS}/${CIRCLE_PROJECT_REPONAME}/ --recursive
            aws s3 rm ${AWS_S3_DIR_ANCHORE_REPORTS}/latest/ --recursive --exclude "*" --include "${CIRCLE_PROJECT_REPONAME}*"
            aws s3 cp anchore-reports ${AWS_S3_DIR_ANCHORE_REPORTS}/latest/ --recursive

            # TODO: Enable this when we want to increase the strictness of our security policies
            # failCount=$(cat anchore-reports/*policy*.json | grep 'fail' | wc -l)
            # echo "FailCount is: ${failCount}"
            # if [ $failCount -gt 0 ]; then
            #   printf "Failed with a policy failure count of: ${failCount}"
            #   exit 1
            # fi
      - store_artifacts:
          path: anchore-reports

  publish:
    executor: default-machine
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: Load the pre-built docker image from workspace
          command: docker load -i /tmp/docker-image.tar
      - run:
          <<: *defaults_build_docker_login
      - run:
          name: setup environment vars for release/snapshot
          command: ./.circleci/_set_up_deploy_envs.sh
      - run:
          name: Re-tag pre built image
          command: |
            docker tag $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$RELEASE_TAG
      - run:
          <<: *defaults_build_docker_publish
      - run:
          <<: *defaults_slack_announcement

  deploy:
    executor: helm-kube
    steps:
      - checkout
      - run:
          name: Install AWS CLI dependencies
          command: *defaults_awsCliDependencies
      - run:
          name: setup environment vars for release/snapshot
          command: ./.circleci/_set_up_deploy_envs.sh
      - run:
          <<: *defaults_deploy_prequisites
      - run:
          <<: *defaults_deploy_config_kubernetes_cluster
      - run:
          <<: *defaults_deploy_config_kubernetes_credentials
      - run:
          <<: *defaults_deploy_config_kubernetes_context
      - run:
          <<: *defaults_deploy_set_kubernetes_context
      - run:
          <<: *defaults_deploy_configure_helm
      - run:
          <<: *defaults_deploy_install_or_upgrade_helm_chart

##
# Workflows
#
# CircleCI Workflow config
##
workflows:
  version: 2
  build_and_test:
    jobs:
      - setup:
          context: org-global
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - test-unit:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - test-coverage:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - vulnerability-check:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - audit-licenses:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - test-integration:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - build:
          context: org-global
          requires:
            - setup
            - test-unit
            - test-coverage
            - test-integration
            - vulnerability-check
            - audit-licenses
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*(\-snapshot)?(\-hotfix(\.[0-9]+))?/
            branches:
              ignore:
                - /.*/
      - license-scan:
          context: org-global
          requires:
            - build
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*(\-snapshot)?(\-hotfix(\.[0-9]+))?/
            branches:
              ignore:
                - /.*/
      - image-scan:
          context: org-global
          requires:
            - build
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*(\-snapshot)?(\-hotfix(\.[0-9]+))?/
            branches:
              ignore:
                - /.*/
      - publish:
          context: org-global
          requires:
            - license-scan
            - image-scan
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*(\-snapshot)?(\-hotfix(\.[0-9]+))?/
            branches:
              ignore:
                - /.*/
      - deploy:
          context: org-global
          requires:
            - publish
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*(\-snapshot)?/
            branches:
              ignore:
                - /.*/

# CircleCI v2 Config
version: 2

defaults: &defaults
  working_directory: /home/circleci/project
  docker:
    - image: dwolla/alpine-node-make

# default_env: &default_env
#   environment:
#     # - TAG_EXP: 'v[0-9]+(\.[0-9]+)*'
#     # - TAG_EXP_SNAPSHOT: 'v[0-9]+(\.[0-9]+)*\-SNAPSHOT'
#     # - TAG: v1.0

defaultDependencies: &defaultDependencies | 
    apk --no-cache add git
    apk --no-cache add ca-certificates
    apk --no-cache add curl
    apk --no-cache add openssh-client

awsCliDependencies: &awsCliDependencies | 
    apk --no-cache add \
            python \
            py-pip \
            groff \
            less \
            mailcap
    pip install --upgrade awscli==1.14.5 s3cmd==2.0.1 python-magic
    apk -v --purge del py-pip

jobs:
  setup:
    <<: *defaults
    steps:
      - run:
          name: Install general dependencies
          command: *defaultDependencies
      - checkout
      - run:
          name: Install interledgerjs/five-bells-ledger-api-tests
          command: npm install github:interledgerjs/five-bells-ledger-api-tests
      - run:
          name: Link NPM sodium
          command: npm link sodium
      - run:
          name: Link NPM argon2
          command: npm link argon2
      - run:
          name: Update NPM install
          command: npm install
      # - run:
      #     name: Update NPM install
      #     command: npm link sodium && npm link argon2 && npm install --production
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - node_modules
  
  test-unit:
    <<: *defaults
    steps:
      - run:
          name: Install general dependencies
          command: *defaultDependencies
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run: 
          name: Create dir for test results
          command: mkdir -p ./test/results
      - run: 
          name: Execute unit tests
          command: npm -s run test:xunit > ./test/results/tape.xml
      - store_artifacts:
          path: ./test/results
          prefix: test
      - store_test_results:
          path: ./test/results
  
  test-coverage:
    <<: *defaults
    steps:
      - run:
          name: Install general dependencies
          command: *defaultDependencies
      - run:
          name: Install AWS CLI dependencies
          command: *awsCliDependencies
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run: 
          name: Execute code coverage check
          command: npm -s run test:coverage-check
      - store_artifacts:
          path: coverage
          prefix: test
      - store_test_results:
          path: coverage
      - run:
          name: Copy code coverage to SonarQube
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ];
            then
                echo "Sending lcov.info to SonarQube..."  
                aws s3 cp coverage/lcov.info $AWS_S3_DIR_SONARQUBE/central-ledger/lcov.info
            else
                echo "Not a release (env CIRCLE_BRANCH != 'master'), skipping sending lcov.info to SonarQube." 
            fi 
  
  test-integration:
    machine: true
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run: 
          name: Create dir for test results
          command: mkdir -p ./test/results
      - run: 
          name: Execute unit tests
          command: npm -s run test:integration
      - store_artifacts:
          path: ./test/results
          prefix: test
      - store_test_results:
          path: ./test/results
  
  test-functional:
    machine: true
    steps:
      - run: 
          name: Add the Postgres 9.6 binaries to the path.
          command: echo ‘/usr/lib/postgresql/9.6/bin/:$PATH’ >> $BASH_ENV
      - run:
          name: Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.11.2/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            mv ~/docker-compose /usr/local/bin/docker-compose
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run: 
          name: Create dir for test results
          command: mkdir -p ./test/results
      - run: 
          name: Execute unit tests
          command: npm -s run test:functional
      - store_artifacts:
          path: ./test/results
          prefix: test
      - store_test_results:
          path: ./test/results


#   test-spec:
#     machine: true
#     # <<: *defaults 
#     steps:
#     #   - run: 
#     #       name: Install general dependencies 
#     #       command: *defaultDependencies 
#     #   - run:  
#     #       name: Add the Postgres 9.6 binaries to the path. 
#     #       command: apk --no-cache add postgresql-client 
#     #   - setup_remote_docker 
#     #   - run:  
#     #       name: Add docker 
#     #       command: apk --no-cache add docker 
#     #   - run:  
#     #       name: Add docker compose 
#     #       command: | 
#     #         apk --no-cache add py-pip 
#     #         pip install docker-compose 
#     #   - run: 
#     #       name: Install Docker Compose 
#     #       command: | 
#     #         curl -L https://github.com/docker/compose/releases/download/1.8.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose; chmod +x /usr/local/bin/docker-compose 
#       - run: 
#           name: Add the Postgres 9.6 binaries to the path.
#           command: echo ‘/usr/lib/postgresql/9.6/bin/:$PATH’ >> $BASH_ENV
#       - run:
#           name: Install Docker Compose
#           command: |
#             curl -L https://github.com/docker/compose/releases/download/1.11.2/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
#             chmod +x ~/docker-compose
#             mv ~/docker-compose /usr/local/bin/docker-compose
#       - checkout
#       - restore_cache:
#           key: dependency-cache-{{ checksum "package.json" }}
#       - run: 
#           name: Create dir for test results
#           command: mkdir -p ./test/results
#       - run: 
#           name: Execute unit tests
#           command: npm -s run test:spec
#       - store_artifacts:
#           path: ./test/results
#           prefix: test
#       - store_test_results:
#           path: ./test/results

  build-snapshot:
    machine: true
    steps:
      - checkout
      - run: 
          name: Print Docker Image
          command: echo "Building Docker Image $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG"
      - run: 
          name: Login to Docker Hub
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run: 
          name: Build Docker image
          command: |
            docker build -t $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG -t $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:snapshot .
      - run: 
          name: Publish Docker image $CIRCLE_TAG & Latest tag to Docker Hub
          command: |
            echo "Publishing $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG"
            docker push $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG
            echo "Publishing $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:snapshot"
            docker push $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:snapshot

#  deploy-snapshot:
#     machine: true
#     <<: *default_env
#     steps:
#       - checkout
#       # login to docker hub
#       # TBD

  build:
    machine: true
    # <<: *default_env
    steps:
      - checkout
      - run: 
          name: Print Docker Image
          command: echo "Building Docker Image $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG"
      - run: 
          name: Login to Docker Hub
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run: 
          name: Build Docker image
          command: |
            docker build -t $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG -t $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:latest .
      - run: 
          name: Publish Docker image $CIRCLE_TAG & Latest tag to Docker Hub
          command: |
            echo "Publishing $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG"
            docker push $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG
            echo "Publishing $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:latest"
            docker push $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:latest

#   deploy:
#     machine: true
#     <<: *default_env
#     steps:
#       - checkout
#       # login to docker hub
#       # TBD

workflows:
  version: 2
  build_and_test:
    jobs:
      - setup:
          context: org-global
          filters:
            tags:
              only: /.*/
            branches:
              ignore: 
                - /feature*/
                - /bugfix*/
      - test-unit:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore: 
                - /feature*/
                - /bugfix*/             
      - test-coverage:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore: 
                - /feature*/
                - /bugfix*/
      - test-integration:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore: 
                - /feature*/
                - /bugfix*/
      - test-functional:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore: 
                - /feature*/
                - /bugfix*/
    #   - test-spec:
    #       context: org-global
    #       requires:
    #         - setup
    #       filters:
    #           tags:
    #             only: /.*/    
    #         branches:
    #           ignore: 
    #             - /feature*/
    #             - /bugfix*/
      - build-snapshot:
          context: org-global
          requires:
            - setup
            - test-unit
            - test-coverage
            - test-integration
            - test-functional
            # - test-spec
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*\-snapshot/
            branches:
              ignore: 
                - /.*/
    #   - deploy-snapshot:
    #       TBD
      - build:
          context: org-global
          requires:
            - setup
            - test-unit
            - test-coverage
            - test-integration
            - test-functional
            # - test-spec
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
            branches:
              ignore: 
                - /.*/
    #   - deploy:
    #       TBD
